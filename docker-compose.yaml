version: '3.9'

services:
  postgres:
    image: postgres:13.2-alpine
    container_name: postgres
    restart: on-failure
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=merch
      - POSTGRES_PASSWORD=merch
      - POSTGRES_DB=my_office
      - POSTGRES_DB_SCHEMA=workspaces
    volumes:
      - ./docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
      - aplication_postgres_data:/var/lib/postgresql/data
    networks:
      - local
      - docker-elk_elk

  mongo:
    image: mongo
    container_name: mongo-local
    restart: on-failure
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: merch
      MONGO_INITDB_ROOT_PASSWORD: merch
      MONGO_INITDB_DATABASE: equipment
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - application_mongo_data:/data/db
    networks:
      - local
      - docker-elk_elk

  employee-api:
    build: business/employee-api
    image: employee-api
    ports:
      - "8085:8085"
    environment:
      - CONFIG_URL=config-server
      - EUREKA_URL=eureka-server
      - POSTGRES=postgres
    depends_on:
      - config-server
      - eureka-server
    networks:
      - local
      - docker-elk_elk

  workspaces-api:
    build: business/workspaces-api
    image: workspaces-api
    restart: always
    ports:
      - "8081:8081"
    environment:
      - CONFIG_URL=config-server
      - EUREKA_URL=eureka-server
      - POSTGRES=postgres
      - LOGSTASH_URL=logstash
      - KAFKA_URL=kafka
    depends_on:
      - config-server
      - eureka-server
    networks:
      - local
      - docker-elk_elk

  eureka-server:
    build: infra/eureka-server
    image: eureka-server
    container_name: eureka-server
    restart: on-failure
    ports:
      - "8282:8282"
    environment:
      - CONFIG_URL=config-server
      - EUREKA_URL=eureka-server
#    depends_on:
#      config-server:
#        condition: service_healthy
    networks:
      - local
      - docker-elk_elk

  config-server:
    build: infra/config
    image: config-server
    container_name: config-server
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://config-server:8888/actuator/health" ]
#      interval: 10s
#      timeout: 5s
#      retries: 3
    ports:
      - "8888:8888"
    environment:
      - CONFIG_URL=config-server
      - EUREKA_URL=eureka-server
    depends_on:
      - postgres
      - mongo
    networks:
      - local
      - docker-elk_elk

  api-gateway:
    build: infra/api-gateway
    image: api-gateway
    ports:
      - "8080:8080"
    environment:
      - CONFIG_URL=config-server
      - EUREKA_URL=eureka-server
      - EMPLOYEE_API=employee-api
      - WORKSPACES_API=workspaces-api
    depends_on:
      - config-server
      - eureka-server
      - employee-api
      - workspaces-api
    networks:
      - local
      - docker-elk_elk

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    hostname: zookeeper
    container_name: zookeeper-local
    restart: on-failure
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 2s
      timeout: 2s
      retries: 15
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - local
      - docker-elk_elk

  kafka1:
    image: confluentinc/cp-kafka:6.2.0
    container_name: kafka1
    hostname: kafka1
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
    restart: on-failure
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: INTERNAL://kafka1:29092, EXTERNAL://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:29092, EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    networks:
      - local
      - docker-elk_elk

  kafka2:
    image: confluentinc/cp-kafka:6.2.0
    container_name: kafka2
    hostname: kafka2
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
    restart: on-failure
    depends_on:
      - zookeeper
      - kafka1
    ports:
      - "9093:9092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: INTERNAL://kafka2:29092, EXTERNAL://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:29092, EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    networks:
      - local
      - docker-elk_elk

  kafka3:
    image: confluentinc/cp-kafka:6.2.0
    container_name: kafka3
    hostname: kafka3
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
    restart: on-failure
    depends_on:
      - zookeeper
      - kafka1
    ports:
      - "9094:9092"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: INTERNAL://kafka3:29092, EXTERNAL://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:29092, EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    networks:
      - local
      - docker-elk_elk

  kafka-ui:
    image: obsidiandynamics/kafdrop:3.27.0
    container_name: kafka-ui
    restart: on-failure
    environment:
      KAFKA_BROKERCONNECT: kafka1:29092,kafka2:29092,kafka3:29092
      SERVER_SERVLET_CONTEXTPATH: /
      JVM_OPTS: "-Xms32M -Xmx64M"
    ports:
      - "9000:9000"
    networks:
      - local
      - docker-elk_elk

  kafka-setup:
    image: confluentinc/cp-kafka:6.2.0
    container_name: kafka-setup
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    command: "kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 3 --replication-factor 3 --topic logs"
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    networks:
      - local

volumes:
  aplication_postgres_data:
    driver: local
  application_mongo_data:
    driver: local

networks:
  local:
    driver: bridge
  docker-elk_elk:
    external: true